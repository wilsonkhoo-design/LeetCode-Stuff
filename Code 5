// https://leetcode.com/problems/find-right-interval/?envType=study-plan-v2&envId=binary-search
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
vector<vector<int>> intervals ={{4,5},{2,3},{1,2}};

vector<int> Found(intervals.size());
class Solution {
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        vector<int> IntervalsFound(intervals.size());
        vector<pair<int, int>> starts;
        
        //Step 1 sort the intervals
        for (int j = 0; j < intervals.size(); ++j) {
            starts.push_back({intervals[j][0], j});
        }
        
        sort(starts.begin(),starts.end());
        
        //Step 2 binary search
        for(int i=0; i<starts.size();i++){
            int target = intervals[i][1];
            IntervalsFound[i]=SearchingIntervals(starts,target);
        }
        return IntervalsFound;
    }
    
    int SearchingIntervals(vector<pair<int, int>>& starts, int& target){
            int left =0;
            int right = starts.size()-1;
            
            while (left <= right) {
            int mid = left + (right - left) / 2;

            if (starts[mid].first < target)
                left = mid + 1;
            else
                right = mid - 1;
        }

        return left < starts.size() ? starts[left].second : -1;
    }
};
int main() {
    // Write C++ code here
    Solution solu;
    Found=solu.findRightInterval(intervals);
    for (const auto& val : Found) {
    cout << val << " ";
}
for (const auto& interval : intervals) {
    cout << "{" << interval[0] << ", " << interval[1] << "} ";
}
    return 0;
}
