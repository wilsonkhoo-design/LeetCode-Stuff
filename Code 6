//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/?envType=study-plan-v2&envId=binary-search
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
vector<int> nums={};

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> results(2);
       
        results[0]=BinarySearch(nums,true,target);
        results[1]=BinarySearch(nums,false,target);
        
        
        return results;
        
    }
private:
    int BinarySearch(vector<int>& nums, bool Direction, int& target){
        int left =0;
        int right =nums.size()-1;
        int tempStorage=-1;
        
        while(left<= right){
            int mid = left +(right-left)/2;
            
            if(nums[mid]==target){
                if(Direction){
                    right=mid-1;
                    tempStorage=mid;
                }
                else{
                    left = mid+1;
                    tempStorage=mid;
                }
            }
            else if(nums[mid]>target)
            right=mid-1;
            
            else
            left=mid+1;
        }
        return tempStorage; 
    }
};
int main() {
    // Write C++ code here
    Solution solu;
    vector<int> print = solu.searchRange(nums,0);
    
    for(int i=0;i<print.size();i++){
        cout<<print[i]<<"\n";
    }
    return 0;
}
